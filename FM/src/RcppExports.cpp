// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fm_get_ret
std::vector<double> fm_get_ret(const std::vector<double>& x, int lag, int skip);
RcppExport SEXP _FM_fm_get_ret(SEXP xSEXP, SEXP lagSEXP, SEXP skipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type skip(skipSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_get_ret(x, lag, skip));
    return rcpp_result_gen;
END_RCPP
}
// GBM_ohlc
List GBM_ohlc(int ukey, double start_price, int n, int DataDate);
RcppExport SEXP _FM_GBM_ohlc(SEXP ukeySEXP, SEXP start_priceSEXP, SEXP nSEXP, SEXP DataDateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ukey(ukeySEXP);
    Rcpp::traits::input_parameter< double >::type start_price(start_priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type DataDate(DataDateSEXP);
    rcpp_result_gen = Rcpp::wrap(GBM_ohlc(ukey, start_price, n, DataDate));
    return rcpp_result_gen;
END_RCPP
}
// fm_nan_ratio
double fm_nan_ratio(const std::vector<double>& x);
RcppExport SEXP _FM_fm_nan_ratio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_nan_ratio(x));
    return rcpp_result_gen;
END_RCPP
}
// fm_inf_ratio
double fm_inf_ratio(const std::vector<double>& x);
RcppExport SEXP _FM_fm_inf_ratio(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_inf_ratio(x));
    return rcpp_result_gen;
END_RCPP
}
// fm_zero_ratio
double fm_zero_ratio(SEXP x, double precision);
RcppExport SEXP _FM_fm_zero_ratio(SEXP xSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_zero_ratio(x, precision));
    return rcpp_result_gen;
END_RCPP
}
// fm_skew
double fm_skew(const std::vector<double>& x);
RcppExport SEXP _FM_fm_skew(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_skew(x));
    return rcpp_result_gen;
END_RCPP
}
// fm_kurt
double fm_kurt(const std::vector<double>& x);
RcppExport SEXP _FM_fm_kurt(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fm_kurt(x));
    return rcpp_result_gen;
END_RCPP
}
// autopcor
List autopcor(const List& dt, const std::vector<int>& lags);
RcppExport SEXP _FM_autopcor(SEXP dtSEXP, SEXP lagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type lags(lagsSEXP);
    rcpp_result_gen = Rcpp::wrap(autopcor(dt, lags));
    return rcpp_result_gen;
END_RCPP
}
// pcor
SEXP pcor(SEXP x, SEXP y, int x_sign, int y_sign);
RcppExport SEXP _FM_pcor(SEXP xSEXP, SEXP ySEXP, SEXP x_signSEXP, SEXP y_signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type x_sign(x_signSEXP);
    Rcpp::traits::input_parameter< int >::type y_sign(y_signSEXP);
    rcpp_result_gen = Rcpp::wrap(pcor(x, y, x_sign, y_sign));
    return rcpp_result_gen;
END_RCPP
}
// rcor
SEXP rcor(SEXP x, SEXP y, int x_sign, int y_sign);
RcppExport SEXP _FM_rcor(SEXP xSEXP, SEXP ySEXP, SEXP x_signSEXP, SEXP y_signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type x_sign(x_signSEXP);
    Rcpp::traits::input_parameter< int >::type y_sign(y_signSEXP);
    rcpp_result_gen = Rcpp::wrap(rcor(x, y, x_sign, y_sign));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FM_fm_get_ret", (DL_FUNC) &_FM_fm_get_ret, 3},
    {"_FM_GBM_ohlc", (DL_FUNC) &_FM_GBM_ohlc, 4},
    {"_FM_fm_nan_ratio", (DL_FUNC) &_FM_fm_nan_ratio, 1},
    {"_FM_fm_inf_ratio", (DL_FUNC) &_FM_fm_inf_ratio, 1},
    {"_FM_fm_zero_ratio", (DL_FUNC) &_FM_fm_zero_ratio, 2},
    {"_FM_fm_skew", (DL_FUNC) &_FM_fm_skew, 1},
    {"_FM_fm_kurt", (DL_FUNC) &_FM_fm_kurt, 1},
    {"_FM_autopcor", (DL_FUNC) &_FM_autopcor, 2},
    {"_FM_pcor", (DL_FUNC) &_FM_pcor, 4},
    {"_FM_rcor", (DL_FUNC) &_FM_rcor, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_FM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
