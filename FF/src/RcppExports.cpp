// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// as_int_group
std::vector<int> as_int_group(const std::vector<double>& group);
RcppExport SEXP _FF_as_int_group(SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(as_int_group(group));
    return rcpp_result_gen;
END_RCPP
}
// qcut
std::vector<int> qcut(const std::vector<double>& data, int numQtls);
RcppExport SEXP _FF_qcut(SEXP dataSEXP, SEXP numQtlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type numQtls(numQtlsSEXP);
    rcpp_result_gen = Rcpp::wrap(qcut(data, numQtls));
    return rcpp_result_gen;
END_RCPP
}
// fill_zero
std::vector<double> fill_zero(const std::vector<double>& v);
RcppExport SEXP _FF_fill_zero(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_zero(v));
    return rcpp_result_gen;
END_RCPP
}
// to_weights
std::vector<double> to_weights(const std::vector<double>& v, bool demean, bool equal_weight);
RcppExport SEXP _FF_to_weights(SEXP vSEXP, SEXP demeanSEXP, SEXP equal_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type demean(demeanSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_weight(equal_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(to_weights(v, demean, equal_weight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FF_as_int_group", (DL_FUNC) &_FF_as_int_group, 1},
    {"_FF_qcut", (DL_FUNC) &_FF_qcut, 2},
    {"_FF_fill_zero", (DL_FUNC) &_FF_fill_zero, 1},
    {"_FF_to_weights", (DL_FUNC) &_FF_to_weights, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
